<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="M:Library.Controllers.AuthorController.GetAllAuthors">
            <summary>
            Get all authors
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.AuthorController.CreateAuthor(Library.Dtos.AuthorDtos.AuthorCreateDto)">
            <summary>
            Create books authors
            </summary>
            <param name="authorDto"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.AuthorController.UpdateAuthor(Library.Dtos.AuthorDtos.AuthorCreateDto,System.Guid)">
            <summary>
            Update author by providing its id
            </summary>
            <param name="authorDto"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.AuthorController.DeleteAuthor(System.Guid)">
            <summary>
            Delete a specific Author by providing its id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.AuthorController.AuthorSearchByName(System.String)">
            <summary>
            Find authors by partial name match.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.BookController.GetAllBooks">
            <summary>
            Get all existing books
            </summary>
        </member>
        <member name="M:Library.Controllers.BookController.CreateBook(Library.Dtos.BookDtos.BookCreateDto)">
            <summary>
            Create books
            </summary>
            <param name="bookDto"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.BookController.UpdateBook(Library.Dtos.BookDtos.BookCreateDto,System.Guid)">
            <summary>
            Updating the book by its id
            </summary>
            <param name="bookDto"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.BookController.DeleteBook(System.Guid)">
            <summary>
            Delete the book by its id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.CategoryController.GetAllCategories">
            <summary>
            Get all existing Categories
            </summary>
        </member>
        <member name="M:Library.Controllers.CategoryController.CreateCategory(Library.Dtos.CategoryDtos.CategoryCreateDto)">
            <summary>
            Create category
            </summary>
        </member>
        <member name="M:Library.Controllers.CategoryController.UpdateCategory(Library.Dtos.CategoryDtos.CategoryCreateDto,System.Guid)">
            <summary>
            Update the category by providing its id
            </summary>
            <param name="categoryDto"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.CategoryController.DeleteCategory(System.Guid)">
            <summary>
            Delete the category by providing its id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Library.Controllers.InventoryController.GetAllInventories">
            <summary>
            Get all Inventories
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.InventoryController.CreateInventory(Library.Dtos.InventoryDtos.InventoryCreateDto)">
            <summary>
            Create Inventory
            </summary>
            <param name="inventoryDto"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.InventoryController.UpdateInventory(Library.Dtos.InventoryDtos.InventoryCreateDto,System.Guid)">
            <summary>
            Updating Inventory by providing its id
            </summary>
            <param name="inventoryDto"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.InventoryController.DeleteInventory(System.Guid)">
            <summary>
            Delete Inventory by providing its id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.LoanController.GetAllLoans">
            <summary>
            Get all loans
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.LoanController.LoanBook(Library.Models.Dtos.LoanDtos.LoanCreateDto)">
            <summary>
            For Loan creation
            </summary>
            <param name="loanDto"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.LoanController.UpdateLoan(Library.Models.Dtos.LoanDtos.LoanCreateDto,System.Guid)">
            <summary>
            Updating Loan by providing its id
            </summary>
            <param name="loanDto"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.LoanController.DeleteLoan(System.Guid)">
            <summary>
            Deleting Loan by its id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.ReviewController.GetAllReviews">
            <summary>
            Get all Reviews
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.ReviewController.CreateReview(Library.Dtos.ReviewDtos.ReviewCreateDto)">
            <summary>
            Create Reviews
            </summary>
            <param name="reviewDto"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.ReviewController.UpdateReview(Library.Dtos.ReviewDtos.ReviewCreateDto,System.Guid)">
            <summary>
            Update Review by providing its id
            </summary>
            <param name="reviewDto"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.ReviewController.DeleteReview(System.Guid)">
            <summary>
            Provide Review id to delete that review
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Controllers.UserController.GetAllUsers">
            <summary>
            Get all existing users
            </summary>
        </member>
        <member name="M:Library.Controllers.UserController.UserGetDetail(System.Guid)">
            <summary>
            Provide wallet id to see detail info about this wallet.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Library.Controllers.UserController.CreateUser(Library.Models.Dtos.UserCreateDto)">
            <summary>
            Create users
            </summary>
        </member>
        <member name="M:Library.Controllers.UserController.UpdateUser(System.Guid,Library.Models.Dtos.UserUpdateDto)">
            <summary>
            Provide the users id to see detail info about this user
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Library.Controllers.UserController.DeleteUser(System.Guid)">
            <summary>
            Provide the users id to see delete this user
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Library.Migrations.initial">
            <inheritdoc />
        </member>
        <member name="M:Library.Migrations.initial.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Library.Migrations.initial.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Library.Migrations.initial.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Library.Migrations.One2ONeWithBookAndInventory">
            <inheritdoc />
        </member>
        <member name="M:Library.Migrations.One2ONeWithBookAndInventory.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Library.Migrations.One2ONeWithBookAndInventory.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Library.Migrations.One2ONeWithBookAndInventory.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Library.Migrations.LoanChanges">
            <inheritdoc />
        </member>
        <member name="M:Library.Migrations.LoanChanges.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Library.Migrations.LoanChanges.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Library.Migrations.LoanChanges.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
